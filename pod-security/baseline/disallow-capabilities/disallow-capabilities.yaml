apiVersion: policies.kyverno.io/v1alpha1
kind: ValidatingPolicy
metadata:
  name: disallow-capabilities
  annotations:
    policies.kyverno.io/title: Disallow Capabilities
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: high
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/subject: Pod
    policies.nirmata.io/remediation-docs: "https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-capabilities/"
    policies.nirmata.io/remediation: "https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-capabilities/remediate-disallow-capabilities.yaml"
    policies.kyverno.io/description: >
      Any additional capabilities not mentioned in the allowed list, which includes AUDIT_WRITE, CHOWN,
      DAC_OVERRIDE, FOWNER, FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID, SETPCAP, SETUID, SYS_CHROOT,
      are prohibited and not permitted.
spec:
  validationActions: [Audit]
  evaluation:
    background:
      enabled: true
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
  variables:
    - name: allowedCapabilities
      expression: >-
        ['AUDIT_WRITE', 'CHOWN', 'DAC_OVERRIDE', 'FOWNER', 'FSETID', 'KILL', 'MKNOD',
        'NET_BIND_SERVICE', 'SETFCAP', 'SETGID', 'SETPCAP', 'SETUID', 'SYS_CHROOT']
  validations:
    - expression: >-
        !object.spec.containers.orValue([]).exists(c,
          has(c.securityContext) &&
          has(c.securityContext.capabilities) &&
          has(c.securityContext.capabilities.add) &&
          c.securityContext.capabilities.add.exists(cap,
            !(cap in variables.allowedCapabilities))) &&
        (!has(object.spec.initContainers) ||
        !object.spec.initContainers.exists(c,
          has(c.securityContext) &&
          has(c.securityContext.capabilities) &&
          has(c.securityContext.capabilities.add) &&
          c.securityContext.capabilities.add.exists(cap,
            !(cap in variables.allowedCapabilities)))) &&
        (!has(object.spec.ephemeralContainers) ||
        !object.spec.ephemeralContainers.exists(c,
          has(c.securityContext) &&
          has(c.securityContext.capabilities) &&
          has(c.securityContext.capabilities.add) &&
          c.securityContext.capabilities.add.exists(cap,
            !(cap in variables.allowedCapabilities))))
      message: >-
        Adding capabilities beyond those listed in the policy rule is disallowed.
