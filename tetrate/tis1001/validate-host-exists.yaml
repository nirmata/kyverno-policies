apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: tis1001-validate-destination-host
  annotations:
    policies.kyverno.io/title: Validate Destination Host Existence
    policies.kyverno.io/category: Istio
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: VirtualService, ServiceEntry
    policies.kyverno.io/description: >-
      Ensures that the destination.host in a VirtualService or ServiceEntry exists in the service registry by checking for a matching Service, VirtualService, or ServiceEntry.
    policies.kyverno.io/rationale: >-
      Prevents routing issues caused by referencing non-existent hosts in Istio configurations.
    policies.kyverno.io/minversion: 1.7.0
spec:
  validationFailureAction: enforce
  rules:
  - name: validate-virtualservice-destination-host
    match:
      any:
      - resources:
          kinds:
          - VirtualService
    validate:
      message: "TIS1001: Specified host '{{ request.object.spec.http[].route[].destination.host || '' }}' not found in the service registry. Ensure a matching Service, VirtualService, or ServiceEntry exists."
      pattern:
        spec:
          http:
          - route:
            - destination:
                host: "VALIDATED_HOST"
      variables:
      - name: validatedServices
        jmesPath: "kubernetes.objects(kind='Service', namespace=request.object.metadata.namespace)[].metadata.name + '.' + request.object.metadata.namespace + '.svc.cluster.local'"
      - name: validatedVirtualServices
        jmesPath: "kubernetes.objects(kind='VirtualService', namespace=request.object.metadata.namespace)[].spec.hosts[]"
      - name: validatedServiceEntries
        jmesPath: "kubernetes.objects(kind='ServiceEntry', namespace=request.object.metadata.namespace)[].spec.hosts[]"
      - name: validatedHosts
        expression: "validatedServices + flatten(validatedVirtualServices) + flatten(validatedServiceEntries)"
      preconditions:
      - key: "{{ request.object.spec.http[].route[].destination.host || '' }}"
        operator: AnyIn
        value: "{{ validatedHosts }}"
        message: "Host found"
  - name: validate-serviceentry-host
    match:
      any:
      - resources:
          kinds:
          - ServiceEntry
    validate:
      message: "TIS1001: Specified host '{{ request.object.spec.hosts[0] || '' }}' not found in the service registry. Ensure a matching Service, VirtualService, or ServiceEntry exists."
      pattern:
        spec:
          hosts:
          - "VALIDATED_HOST"
      variables:
      - name: validatedServices
        jmesPath: "kubernetes.objects(kind='Service', namespace=request.object.metadata.namespace)[].metadata.name + '.' + request.object.metadata.namespace + '.svc.cluster.local'"
      - name: validatedVirtualServices
        jmesPath: "kubernetes.objects(kind='VirtualService', namespace=request.object.metadata.namespace)[].spec.hosts[]"
      - name: validatedServiceEntries
        jmesPath: "kubernetes.objects(kind='ServiceEntry', namespace=request.object.metadata.namespace)[].spec.hosts[]"
      - name: validatedHosts
        expression: "validatedServices + flatten(validatedVirtualServices) + flatten(validatedServiceEntries)"
      preconditions:
      - key: "{{ request.object.spec.hosts[0] || '' }}"
        operator: AnyIn
        value: "{{ validatedHosts }}"
        message: "Host found"