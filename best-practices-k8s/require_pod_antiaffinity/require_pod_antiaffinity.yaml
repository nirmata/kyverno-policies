apiVersion: policies.kyverno.io/v1alpha1
kind: ValidatingPolicy
metadata:
    name: require-pod-antiaffinity
    annotations:
        policies.kyverno.io/title: Require Pod Anti-Affinity
        policies.kyverno.io/minversion: 1.14.1
        policies.kyverno.io/category: Best Practices
        policies.kyverno.io/severity: medium
        policies.kyverno.io/subject: Pod
        policies.kyverno.io/description: >-
            Pod anti-affinity ensures that Pods are not scheduled on the same node or topology as other matching Pods, enhancing fault tolerance and availability. This policy validates that Pods define either a required or preferred anti-affinity rule using  `requiredDuringSchedulingIgnoredDuringExecution` or  `preferredDuringSchedulingIgnoredDuringExecution` with a valid topologyKey.
spec:
    validationActions:
        - Deny
    matchConstraints:
        resourceRules:
            - apiGroups: [""]
              apiVersions: ["v1"]
              resources: ["pods"]
              operations: ["CREATE", "UPDATE"]
    validations:
        - expression: "has(object.spec) && has(object.spec.affinity) && has(object.spec.affinity.podAntiAffinity) && (\n  (has(object.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution) && \n   size(object.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution) > 0 && \n   object.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.exists(r, has(r.topologyKey))) ||\n  (has(object.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution) && \n   size(object.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution) > 0 && \n   object.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.exists(p, has(p.weight) && has(p.podAffinityTerm) && has(p.podAffinityTerm.topologyKey)))\n)\n"
          message: "Pod must have either required or preferred podAntiAffinity."