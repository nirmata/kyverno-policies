apiVersion: policies.kyverno.io/v1alpha1
kind: ValidatingPolicy
metadata:
  name: check-certificate-validation-git-env-var
  annotations:
    policies.kyverno.io/title: Check for certificate validation in the Dockerfile using Node.js environment variable
    policies.kyverno.io/category: Dockerfile Best Practices
    policies.kyverno.io/severity: medium
    policies.nirmata.io/remediation-docs: "https://docs.nirmata.io/policysets/dockerfile_best_practices/check-certificate-validation-git-env-var/"
    policies.kyverno.io/description: >-
      To control SSL certificate validation in Git operations within a Docker container,
      you can use the GIT_SSL_NO_VERIFY environment variable. Setting this variable to true
      or 1 tells Git to bypass SSL certificate validation.
spec:
  validationActions:
    - Audit
  evaluation:
    mode: JSON
    background:
      enabled: false
  matchConstraints:
    resourceRules:
      - apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["*"]
        operations: ["CREATE", "UPDATE"]
  matchConditions:
    - name: has-dockerfile-structure
      expression: "has(object.Stages)"
    - name: has-env-or-arg-commands
      expression: "has(object.Stages) && object.Stages.exists(stage, has(stage.Commands) && stage.Commands.exists(cmd, cmd.Name == 'ENV' || cmd.Name == 'ARG'))"
  validations:
    - expression: |
        !object.Stages.exists(stage,
          has(stage.Commands) && stage.Commands.exists(cmd,
            (cmd.Name == 'ENV' && has(cmd.Env) && cmd.Env.exists(env,
              env.Key == 'GIT_SSL_NO_VERIFY' && (env.Value == '1' || env.Value == 'true')
            )) ||
            (cmd.Name == 'ARG' && has(cmd.Args) && cmd.Args.exists(arg,
              arg.Key == 'GIT_SSL_NO_VERIFY' && (arg.Value == '1' || arg.Value == 'true')
            ))
          )
        )
      message: "Ensure certificate validation is enabled by using `GIT_SSL_NO_VERIFY` env with value set to '0' or 'false'"