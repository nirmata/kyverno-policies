apiVersion: policies.kyverno.io/v1alpha1
kind: ValidatingPolicy
metadata:
  name: check-last-user
  annotations:
    policies.kyverno.io/title: Check last USER
    policies.kyverno.io/category: Dockerfile Best Practices
    policies.kyverno.io/severity: medium
    policies.nirmata.io/remediation-docs: "https://docs.nirmata.io/policysets/dockerfile_best_practices/check-last-user/"
    policies.kyverno.io/description: >-
      This policy validates that the last USER is not root.
spec:
  validationActions:
    - Audit
  evaluation:
    mode: JSON
    background:
      enabled: false
  matchConstraints:
    resourceRules:
      - apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["*"]
        operations: ["CREATE", "UPDATE"]
  matchConditions:
    - name: has-dockerfile-structure
      expression: "has(object.Stages)"
    - name: has-user-commands
      expression: "has(object.Stages) && object.Stages.exists(stage, has(stage.Commands) && stage.Commands.exists(cmd, cmd.Name == 'USER'))"
  validations:
    - expression: |
        object.Stages.all(stage,
          !has(stage.Commands) || 
          stage.Commands.filter(cmd, cmd.Name == 'USER').size() == 0 ||
          !stage.Commands.filter(cmd, cmd.Name == 'USER')[stage.Commands.filter(cmd, cmd.Name == 'USER').size() - 1].User.startsWith('0:') &&
          !stage.Commands.filter(cmd, cmd.Name == 'USER')[stage.Commands.filter(cmd, cmd.Name == 'USER').size() - 1].User.endsWith(':0') &&
          stage.Commands.filter(cmd, cmd.Name == 'USER')[stage.Commands.filter(cmd, cmd.Name == 'USER').size() - 1].User != 'root' &&
          stage.Commands.filter(cmd, cmd.Name == 'USER')[stage.Commands.filter(cmd, cmd.Name == 'USER').size() - 1].User != '0'
        )
      message: "Default user for the container should not be root"
