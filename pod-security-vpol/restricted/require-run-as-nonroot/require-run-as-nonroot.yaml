apiVersion: policies.kyverno.io/v1alpha1
kind: ValidatingPolicy
metadata:
    name: require-run-as-nonroot
    annotations:
        policies.kyverno.io/title: Require runAsNonRoot
        policies.kyverno.io/category: Pod Security Standards (Restricted)
        policies.kyverno.io/severity: critical
        policies.kyverno.io/subject: Pod
        kyverno.io/kubernetes-version: "1.22-1.23"
        policies.nirmata.io/remediation-docs: "https://docs.nirmata.io/policysets/podsecurity/restricted/require-run-as-non-root/"
        policies.nirmata.io/remediation: "https://github.com/nirmata/kyverno-policies/tree/main/pod-security/restricted/require-run-as-nonroot/remediate-require-run-as-nonroot.yaml"
        policies.kyverno.io/description: >-
            Containers must be required to run as non-root users. This policy ensures either the field  spec.securityContext.runAsNonRoot is set to `true`, or the fields spec.containers[*].securityContext.runAsNonRoot, spec.initContainers[*].securityContext.runAsNonRoot, and spec.ephemeralContainers[*].securityContext.runAsNonRoot is set to `true`. A known issue prevents a policy such as this using `anyPattern` from being persisted properly in Kubernetes 1.23.0-1.23.2.
spec:
    validationActions: [Audit]
    evaluation:
        background:
            enabled: true
    matchConstraints:
        resourceRules:
            - apiGroups: [""]
              apiVersions: ["v1"]
              resources: ["pods"]
              operations: ["CREATE", "UPDATE"]
    validations:
        - expression: >
            (has(object.spec.securityContext) && 
            has(object.spec.securityContext.runAsNonRoot) && 
            object.spec.securityContext.runAsNonRoot == true &&

            object.spec.containers.all(c,
              !has(c.securityContext) ||
              !has(c.securityContext.runAsNonRoot) ||
              c.securityContext.runAsNonRoot == true) &&

            (!has(object.spec.initContainers) ||
              object.spec.initContainers.all(c,
                !has(c.securityContext) ||
                !has(c.securityContext.runAsNonRoot) ||
                c.securityContext.runAsNonRoot == true)) &&

            (!has(object.spec.ephemeralContainers) ||
              object.spec.ephemeralContainers.all(c,
                !has(c.securityContext) ||
                !has(c.securityContext.runAsNonRoot) ||
                c.securityContext.runAsNonRoot == true))) ||

            (!has(object.spec.securityContext) ||
            !has(object.spec.securityContext.runAsNonRoot) ||
            object.spec.securityContext.runAsNonRoot != true) &&

            object.spec.containers.all(c,
              has(c.securityContext) &&
              has(c.securityContext.runAsNonRoot) &&
              c.securityContext.runAsNonRoot == true) &&

            (!has(object.spec.initContainers) ||
              object.spec.initContainers.all(c,
                has(c.securityContext) &&
                has(c.securityContext.runAsNonRoot) &&
                c.securityContext.runAsNonRoot == true)) &&

            (!has(object.spec.ephemeralContainers) ||
              object.spec.ephemeralContainers.all(c,
                has(c.securityContext) &&
                has(c.securityContext.runAsNonRoot) &&
                c.securityContext.runAsNonRoot == true))
          message: >-
            Running the container as root is not allowed. Either set spec.securityContext.runAsNonRoot to true or set securityContext.runAsNonRoot to true for all containers.