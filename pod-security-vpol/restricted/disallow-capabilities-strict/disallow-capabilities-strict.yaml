apiVersion: policies.kyverno.io/v1alpha1
kind: ValidatingPolicy
metadata:
  name: disallow-capabilities-strict
  annotations:
    policies.kyverno.io/title: Disallow Capabilities (Strict)
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/subject: Pod
    policies.nirmata.io/remediation-docs: "https://docs.nirmata.io/policysets/podsecurity/restricted/disallow-capabilities-strict/"
    policies.kyverno.io/description: >-
      Adding capabilities other than `NET_BIND_SERVICE` is disallowed. In addition,
      all containers must explicitly drop `ALL` capabilities.
spec:
    validationActions: [Audit]
    evaluation:
        background:
            enabled: true
    matchConstraints:
        resourceRules:
            - apiGroups: [""]
              apiVersions: ["v1"]
              resources: ["pods"]
              operations: ["CREATE", "UPDATE"]
    variables:
        - name: allowedCapabilities
          expression: >-
            ['NET_BIND_SERVICE', '']
    validations:
        - expression: >
            object.spec.containers.orValue([]).all(c,

              has(c.securityContext) &&
              has(c.securityContext.capabilities) &&
              has(c.securityContext.capabilities.drop) &&
              c.securityContext.capabilities.drop.exists(cap, cap == 'ALL')) &&
            (!has(object.spec.initContainers) ||

              object.spec.initContainers.all(c,
                has(c.securityContext) &&
                has(c.securityContext.capabilities) &&
                has(c.securityContext.capabilities.drop) &&
                c.securityContext.capabilities.drop.exists(cap, cap == 'ALL'))) &&
            (!has(object.spec.ephemeralContainers) ||

              object.spec.ephemeralContainers.all(c,
                has(c.securityContext) &&
                has(c.securityContext.capabilities) &&
                has(c.securityContext.capabilities.drop) &&
                c.securityContext.capabilities.drop.exists(cap, cap == 'ALL')))
          message: >-
            Containers must drop `ALL` capabilities.
        - expression: >
            !object.spec.containers.orValue([]).exists(c,

              has(c.securityContext) &&
              has(c.securityContext.capabilities) &&
              has(c.securityContext.capabilities.add) &&
              c.securityContext.capabilities.add.exists(cap,
                !(cap in variables.allowedCapabilities))) &&
            (!has(object.spec.initContainers) ||  !object.spec.initContainers.exists(c,

              has(c.securityContext) &&
              has(c.securityContext.capabilities) &&
              has(c.securityContext.capabilities.add) &&
              c.securityContext.capabilities.add.exists(cap,
                !(cap in variables.allowedCapabilities)))) &&
            (!has(object.spec.ephemeralContainers) ||  !object.spec.ephemeralContainers.exists(c,

              has(c.securityContext) &&
              has(c.securityContext.capabilities) &&
              has(c.securityContext.capabilities.add) &&
              c.securityContext.capabilities.add.exists(cap,
                !(cap in variables.allowedCapabilities))))
          message: >-
            Any capabilities added other than NET_BIND_SERVICE are disallowed.